"graphicsstats" android.view.IGraphicsStats (1)
	<com.android.server.GraphicsStatsService: android.os.ParcelFileDescriptor requestBufferForProcess(java.lang.String,android.view.IGraphicsStatsCallback)>
"package" android.content.pm.IPackageManager (2)
	<com.android.server.pm.PackageManagerService: void addOnPermissionsChangeListener(android.content.pm.IOnPermissionsChangeListener)>
	<com.android.server.pm.PackageManagerService: void registerMoveCallback(android.content.pm.IPackageMoveObserver)>
"clipboard" android.content.IClipboard (1)
	<com.android.server.clipboard.ClipboardService$ClipboardImpl: void addPrimaryClipChangedListener(android.content.IOnPrimaryClipChangedListener,java.lang.String)>
"ethernet" android.net.IEthernetManager (1)
	<com.android.server.ethernet.EthernetServiceImpl: void addListener(android.net.IEthernetServiceListener)>
"country_detector" android.location.ICountryDetector (1)
	<com.android.server.CountryDetectorService: void addCountryListener(android.location.ICountryListener)>
"audio" android.media.IAudioService (9)
	<com.android.server.audio.AudioService: int requestAudioFocus(android.media.AudioAttributes,int,android.os.IBinder,android.media.IAudioFocusDispatcher,java.lang.String,java.lang.String,int,android.media.audiopolicy.IAudioPolicyCallback,int)>
	<com.android.server.audio.AudioService: void forceRemoteSubmixFullVolume(boolean,android.os.IBinder)>
	<com.android.server.audio.AudioService: void registerRecordingCallback(android.media.IRecordingConfigDispatcher)>
	<com.android.server.audio.AudioService: void registerAudioServerStateDispatcher(android.media.IAudioServerStateDispatcher)>
	<com.android.server.audio.AudioService: java.lang.String registerAudioPolicy(android.media.audiopolicy.AudioPolicyConfig,android.media.audiopolicy.IAudioPolicyCallback,boolean,boolean,boolean)>
	<com.android.server.audio.AudioService: void startBluetoothScoVirtualCall(android.os.IBinder)>
	<com.android.server.audio.AudioService: void startBluetoothSco(android.os.IBinder,int)>
	<com.android.server.audio.AudioService: void registerPlaybackCallback(android.media.IPlaybackConfigDispatcher)>
	<com.android.server.audio.AudioService: android.media.AudioRoutesInfo startWatchingRoutes(android.media.IAudioRoutesObserver)>
"input" android.hardware.input.IInputManager (3)
	<com.android.server.input.InputManagerService: void registerInputDevicesChangedListener(android.hardware.input.IInputDevicesChangedListener)>
	<com.android.server.input.InputManagerService: void vibrate(int,long[],int,android.os.IBinder)>
	<com.android.server.input.InputManagerService: void registerTabletModeChangedListener(android.hardware.input.ITabletModeChangedListener)>
"launcherapps" android.content.pm.ILauncherApps (1)
	<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: void addOnAppsChangedListener(java.lang.String,android.content.pm.IOnAppsChangedListener)>
"content" android.content.IContentService (2)
	<com.android.server.content.ContentService: void addStatusChangeListener(int,android.content.ISyncStatusObserver)>
	<com.android.server.content.ContentService: void registerContentObserver(android.net.Uri,boolean,android.database.IContentObserver,int,int)>
"contexthub" android.hardware.location.IContextHubService (1)
	<com.android.server.location.ContextHubService: int registerCallback(android.hardware.location.IContextHubCallback)>
"netpolicy" android.net.INetworkPolicyManager (1)
	<com.android.server.net.NetworkPolicyManagerService: void registerListener(android.net.INetworkPolicyListener)>
"autofill" android.view.autofill.IAutoFillManager (1)
	<com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub: int addClient(android.view.autofill.IAutoFillManagerClient,int)>
"display" android.hardware.display.IDisplayManager (2)
	<com.android.server.display.DisplayManagerService$BinderService: void registerCallback(android.hardware.display.IDisplayManagerCallback)>
	<com.android.server.display.DisplayManagerService$BinderService: int createVirtualDisplay(android.hardware.display.IVirtualDisplayCallback,android.media.projection.IMediaProjection,java.lang.String,java.lang.String,int,int,int,android.view.Surface,int,java.lang.String)>
"print" android.print.IPrintManager (1)
	<com.android.server.print.PrintManagerService$PrintManagerImpl: void createPrinterDiscoverySession(android.print.IPrinterDiscoveryObserver,int)>
"location" android.location.ILocationManager (6)
	<com.android.server.LocationManagerService: void requestLocationUpdates(android.location.LocationRequest,android.location.ILocationListener,android.app.PendingIntent,java.lang.String)>
	<com.android.server.LocationManagerService: void addTestProvider(java.lang.String,com.android.internal.location.ProviderProperties,java.lang.String)>
	<com.android.server.LocationManagerService: void removeUpdates(android.location.ILocationListener,android.app.PendingIntent,java.lang.String)>
	<com.android.server.LocationManagerService: void clearTestProviderEnabled(java.lang.String,java.lang.String)>
	<com.android.server.LocationManagerService: boolean addGnssNavigationMessageListener(android.location.IGnssNavigationMessageListener,java.lang.String)>
	<com.android.server.LocationManagerService: boolean addGnssMeasurementsListener(android.location.IGnssMeasurementsListener,java.lang.String)>
"media_router" android.media.IMediaRouterService (1)
	<com.android.server.media.MediaRouterService: void registerClientAsUser(android.media.IMediaRouterClient,java.lang.String,int)>
"wifi" android.net.wifi.IWifiManager (1)
	<com.android.server.wifi.WifiServiceImpl: int startLocalOnlyHotspot(android.os.Messenger,android.os.IBinder,java.lang.String)>
"mount" android.os.storage.IStorageManager (1)
	<com.android.server.StorageManagerService: void registerListener(android.os.storage.IStorageEventListener)>
"voiceinteraction" com.android.internal.app.IVoiceInteractionManagerService (2)
	<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: void showSession(android.service.voice.IVoiceInteractionService,android.os.Bundle,int)>
	<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: void registerVoiceInteractionSessionListener(com.android.internal.app.IVoiceInteractionSessionListener)>
"textservices" com.android.internal.textservice.ITextServicesManager (1)
	<com.android.server.TextServicesManagerService: void getSpellCheckerService(java.lang.String,java.lang.String,com.android.internal.textservice.ITextServicesSessionListener,com.android.internal.textservice.ISpellCheckerSessionListener,android.os.Bundle)>
"midi" android.media.midi.IMidiManager (7)
	<com.android.server.midi.MidiService: void closeDevice(android.os.IBinder,android.os.IBinder)>
	<com.android.server.midi.MidiService: void unregisterListener(android.os.IBinder,android.media.midi.IMidiDeviceListener)>
	<com.android.server.midi.MidiService: void openDevice(android.os.IBinder,android.media.midi.MidiDeviceInfo,android.media.midi.IMidiDeviceOpenCallback)>
	<com.android.server.midi.MidiService: void openBluetoothDevice(android.os.IBinder,android.bluetooth.BluetoothDevice,android.media.midi.IMidiDeviceOpenCallback)>
	<com.android.server.midi.MidiService: void registerListener(android.os.IBinder,android.media.midi.IMidiDeviceListener)>
	<com.android.server.midi.MidiService: android.media.midi.MidiDeviceInfo registerDeviceServer(android.media.midi.IMidiDeviceServer,int,int,java.lang.String[],java.lang.String[],android.os.Bundle,int)>
	<com.android.server.midi.MidiService: void unregisterDeviceServer(android.media.midi.IMidiDeviceServer)>
"network_management" android.os.INetworkManagementService (2)
	<com.android.server.NetworkManagementService: void registerNetworkActivityListener(android.os.INetworkActivityListener)>
	<com.android.server.NetworkManagementService: void registerObserver(android.net.INetworkManagementEventObserver)>
"deviceidle" android.os.IDeviceIdleController (1)
	<com.android.server.DeviceIdleController$BinderService: boolean registerMaintenanceActivityListener(android.os.IMaintenanceActivityListener)>
"telephony.registry" com.android.internal.telephony.ITelephonyRegistry (3)
	<com.android.server.TelephonyRegistry: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>
	<com.android.server.TelephonyRegistry: void listenForSubscriber(int,java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>
	<com.android.server.TelephonyRegistry: void addOnSubscriptionsChangedListener(java.lang.String,com.android.internal.telephony.IOnSubscriptionsChangedListener)>
"appops" com.android.internal.app.IAppOpsService (4)
	<com.android.server.AppOpsService: void startWatchingModeWithFlags(int,java.lang.String,int,com.android.internal.app.IAppOpsCallback)>
	<com.android.server.AppOpsService: void startWatchingMode(int,java.lang.String,com.android.internal.app.IAppOpsCallback)>
	<com.android.server.AppOpsService: void startWatchingActive(int[],com.android.internal.app.IAppOpsActiveCallback)>
	<com.android.server.AppOpsService: android.os.IBinder getToken(android.os.IBinder)>
"network_score" android.net.INetworkScoreService (1)
	<com.android.server.NetworkScoreService: void registerNetworkScoreCache(int,android.net.INetworkScoreCache,int)>
"accessibility" android.view.accessibility.IAccessibilityManager (2)
	<com.android.server.accessibility.AccessibilityManagerService: int addAccessibilityInteractionConnection(android.view.IWindow,android.view.accessibility.IAccessibilityInteractionConnection,java.lang.String,int)>
	<com.android.server.accessibility.AccessibilityManagerService: long addClient(android.view.accessibility.IAccessibilityManagerClient,int)>
"window" android.view.IWindowManager (2)
	<com.android.server.wm.WindowManagerService: boolean registerWallpaperVisibilityListener(android.view.IWallpaperVisibilityListener,int)>
	<com.android.server.wm.WindowManagerService: void registerDockedStackListener(android.view.IDockedStackListener)>
"activity" android.app.IActivityManager (9)
	<com.android.server.am.ActivityManagerService: void registerProcessObserver(android.app.IProcessObserver)>
	<com.android.server.am.ActivityManagerService: boolean unlockUser(int,byte[],byte[],android.os.IProgressListener)>
	<com.android.server.am.ActivityManagerService: android.content.Intent registerReceiver(android.app.IApplicationThread,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int,int)>
	<com.android.server.am.ActivityManagerService: boolean startUserInBackgroundWithListener(int,android.os.IProgressListener)>
	<com.android.server.am.ActivityManagerService: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>
	<com.android.server.am.ActivityManagerService: boolean startUserInBackground(int)>
	<com.android.server.am.ActivityManagerService: void registerUidObserver(android.app.IUidObserver,int,int,java.lang.String)>
	<com.android.server.am.ActivityManagerService: void registerUserSwitchObserver(android.app.IUserSwitchObserver,java.lang.String)>
	<com.android.server.am.ActivityManagerService: void registerIntentSenderCancelListener(android.content.IIntentSender,com.android.internal.os.IResultReceiver)>
"input_method" com.android.internal.view.IInputMethodManager (1)
	<com.android.server.InputMethodManagerService: void addClient(com.android.internal.view.IInputMethodClient,com.android.internal.view.IInputContext,int,int)>
"media_session" android.media.session.ISessionManager (1)
	<com.android.server.media.MediaSessionService$SessionManagerImpl: void addSessionsListener(android.media.session.IActiveSessionsListener,android.content.ComponentName,int)>
Vulnerabilities in Helper Class:
	<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>
	<android.media.AudioManager: void startBluetoothScoVirtualCall()>
	<android.media.AudioManager: void registerAudioPlaybackCallback(android.media.AudioManager$AudioPlaybackCallback,android.os.Handler)>
	<android.media.session.MediaSessionManager: void addOnActiveSessionsChangedListener(android.media.session.MediaSessionManager$OnActiveSessionsChangedListener,android.content.ComponentName,android.os.Handler)>
	<android.media.AudioManager: int requestAudioFocus(android.media.AudioManager$OnAudioFocusChangeListener,android.media.AudioAttributes,int,int,android.media.audiopolicy.AudioPolicy)>
	<android.hardware.display.DisplayManager: android.view.Display[] getDisplays(java.lang.String)>
	<android.media.session.MediaSessionManager: void addOnActiveSessionsChangedListener(android.media.session.MediaSessionManager$OnActiveSessionsChangedListener,android.content.ComponentName,int,android.os.Handler)>
	<android.app.AppOpsManager: android.os.IBinder getToken(com.android.internal.app.IAppOpsService)>
	<android.hardware.input.InputManager: android.view.InputDevice getInputDevice(int)>
	<android.view.accessibility.AccessibilityManager: java.util.List getEnabledAccessibilityServiceList(int)>
	<android.view.autofill.AutofillManager: void onCreate(android.os.Bundle)>
	<android.location.LocationManager: void requestSingleUpdate(android.location.Criteria,android.app.PendingIntent)>
	<android.location.LocationManager: void requestLocationUpdates(long,float,android.location.Criteria,android.location.LocationListener,android.os.Looper)>
	<android.location.LocationManager: void requestSingleUpdate(java.lang.String,android.app.PendingIntent)>
	<android.location.CountryDetector: void addCountryListener(android.location.CountryListener,android.os.Looper)>
	<android.media.AudioManager: boolean registerRemoteController(android.media.RemoteController)>
	<android.hardware.display.DisplayManager: android.hardware.display.VirtualDisplay createVirtualDisplay(java.lang.String,int,int,int,android.view.Surface,int,android.hardware.display.VirtualDisplay$Callback,android.os.Handler)>
	<android.app.AppOpsManager: void startWatchingMode(java.lang.String,java.lang.String,android.app.AppOpsManager$OnOpChangedListener)>
	<android.view.autofill.AutofillManager: void notifyViewExited(android.view.View)>
	<android.media.AudioManager: void requestAudioFocusForCall(int,int)>
	<android.os.storage.StorageManager: void registerListener(android.os.storage.StorageEventListener)>
	<android.print.PrintManager: android.print.PrinterDiscoverySession createPrinterDiscoverySession()>
	<android.media.AudioManager: int requestAudioFocus(android.media.AudioManager$OnAudioFocusChangeListener,android.media.AudioAttributes,int,int)>
	<android.net.wifi.WifiManager: void startLocalOnlyHotspot(android.net.wifi.WifiManager$LocalOnlyHotspotCallback,android.os.Handler)>
	<android.media.AudioManager: void startBluetoothSco()>
	<android.view.accessibility.AccessibilityManager: void setPictureInPictureActionReplacingConnection(android.view.accessibility.IAccessibilityInteractionConnection)>
	<android.view.accessibility.AccessibilityManager: void interrupt()>
	<android.net.NetworkScoreManager: void registerNetworkScoreCache(int,android.net.INetworkScoreCache)>
	<android.view.accessibility.AccessibilityManager: void <init>(android.os.Handler,android.view.accessibility.IAccessibilityManager,int)>
	<android.app.AppOpsManager: void startWatchingMode(java.lang.String,java.lang.String,int,android.app.AppOpsManager$OnOpChangedListener)>
	<android.app.ActivityManager: void addOnUidImportanceListener(android.app.ActivityManager$OnUidImportanceListener,int)>
	<android.media.midi.MidiManager: android.media.midi.MidiDeviceServer createDeviceServer(android.media.midi.MidiReceiver[],int,java.lang.String[],java.lang.String[],android.os.Bundle,int,android.media.midi.MidiDeviceServer$Callback)>
	<android.telephony.TelephonyManager: void listen(android.telephony.PhoneStateListener,int)>
	<android.media.midi.MidiManager: void registerDeviceCallback(android.media.midi.MidiManager$DeviceCallback,android.os.Handler)>
	<android.content.ClipboardManager: void addPrimaryClipChangedListener(android.content.ClipboardManager$OnPrimaryClipChangedListener)>
	<android.location.LocationManager: void requestSingleUpdate(android.location.Criteria,android.location.LocationListener,android.os.Looper)>
	<android.content.pm.LauncherApps: void registerCallback(android.content.pm.LauncherApps$Callback)>
	<android.media.session.MediaSessionManager: void addOnActiveSessionsChangedListener(android.media.session.MediaSessionManager$OnActiveSessionsChangedListener,android.content.ComponentName)>
	<android.net.EthernetManager: void addListener(android.net.EthernetManager$Listener)>
	<android.net.NetworkPolicyManager: void registerListener(android.net.INetworkPolicyListener)>
	<android.media.MediaRouter: void rebindAsUser(int)>
	<android.view.accessibility.AccessibilityManager: java.util.List getInstalledAccessibilityServiceList()>
	<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener,android.os.Looper)>
	<android.view.autofill.AutofillManager: void onAuthenticationResult(int,android.content.Intent,android.view.View)>
	<android.telephony.SubscriptionManager: void addOnSubscriptionsChangedListener(android.telephony.SubscriptionManager$OnSubscriptionsChangedListener)>
	<android.media.AudioManager: void setAudioServerStateCallback(java.util.concurrent.Executor,android.media.AudioManager$AudioServerStateCallback)>
	<android.view.textservice.TextServicesManager: android.view.textservice.SpellCheckerSession newSpellCheckerSession(android.os.Bundle,java.util.Locale,android.view.textservice.SpellCheckerSession$SpellCheckerSessionListener,boolean)>
	<android.hardware.display.DisplayManager: android.hardware.display.VirtualDisplay createVirtualDisplay(android.media.projection.MediaProjection,java.lang.String,int,int,int,android.view.Surface,int,android.hardware.display.VirtualDisplay$Callback,android.os.Handler,java.lang.String)>
	<android.view.accessibility.AccessibilityManager: int addAccessibilityInteractionConnection(android.view.IWindow,java.lang.String,android.view.accessibility.IAccessibilityInteractionConnection)>
	<android.location.LocationManager: void requestLocationUpdates(android.location.LocationRequest,android.location.LocationListener,android.os.Looper)>
	<android.location.LocationManager: void clearTestProviderEnabled(java.lang.String)>
	<android.view.accessibility.AccessibilityManager: boolean sendFingerprintGesture(int)>
	<android.hardware.input.InputManager: void registerInputDeviceListener(android.hardware.input.InputManager$InputDeviceListener,android.os.Handler)>
	<android.view.accessibility.AccessibilityManager: void notifyAccessibilityButtonClicked()>
	<android.content.pm.LauncherApps: void registerCallback(android.content.pm.LauncherApps$Callback,android.os.Handler)>
	<android.media.MediaRouter: void <init>(android.content.Context)>
	<android.media.midi.MidiManager: void openBluetoothDevice(android.bluetooth.BluetoothDevice,android.media.midi.MidiManager$OnDeviceOpenedListener,android.os.Handler)>
	<android.view.accessibility.AccessibilityManager: boolean isHighTextContrastEnabled()>
	<android.location.LocationManager: void addTestProvider(java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,boolean,int,int)>
	<android.view.autofill.AutofillManager: void notifyViewExited(android.view.View,int)>
	<android.app.AppOpsManager: void finishOp(int,int,java.lang.String)>
	<android.app.AppOpsManager: int startOpNoThrow(int,int,java.lang.String)>
	<android.view.accessibility.AccessibilityManager: boolean isTouchExplorationEnabled()>
	<android.media.AudioManager: void registerAudioRecordingCallback(android.media.AudioManager$AudioRecordingCallback,android.os.Handler)>
	<android.view.accessibility.AccessibilityManager: void removeAccessibilityInteractionConnection(android.view.IWindow)>
	<android.app.AppOpsManager: void startWatchingActive(int[],android.app.AppOpsManager$OnOpActiveChangedListener)>
	<android.view.accessibility.AccessibilityManager: void sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
	<android.app.AppOpsManager: void startWatchingMode(int,java.lang.String,android.app.AppOpsManager$OnOpChangedListener)>
	<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>
	<android.net.ConnectivityManager: void addDefaultNetworkActiveListener(android.net.ConnectivityManager$OnNetworkActiveListener)>
	<android.location.LocationManager: void requestLocationUpdates(android.location.LocationRequest,android.app.PendingIntent)>
	<android.app.AppOpsManager: void finishOp(int)>
	<android.hardware.location.ContextHubManager: void <init>(android.content.Context,android.os.Looper)>
	<android.media.AudioManager: int registerAudioPolicy(android.media.audiopolicy.AudioPolicy)>
	<android.hardware.input.InputManager: void registerOnTabletModeChangedListener(android.hardware.input.InputManager$OnTabletModeChangedListener,android.os.Handler)>
	<android.view.accessibility.AccessibilityManager: void <init>(android.content.Context,android.view.accessibility.IAccessibilityManager,int)>
	<android.media.AudioManager: int requestAudioFocus(android.media.AudioFocusRequest)>
	<android.app.AppOpsManager: void finishOp(java.lang.String,int,java.lang.String)>
	<android.media.AudioManager: int requestAudioFocus(android.media.AudioFocusRequest,android.media.audiopolicy.AudioPolicy)>
	<android.media.midi.MidiManager: void openDevice(android.media.midi.MidiDeviceInfo,android.media.midi.MidiManager$OnDeviceOpenedListener,android.os.Handler)>
	<android.view.accessibility.AccessibilityManager: void notifyAccessibilityButtonVisibilityChanged(boolean)>
	<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.app.PendingIntent)>
	<android.app.AppOpsManager: int startOp(int,int,java.lang.String,boolean)>
	<android.net.NetworkScoreManager: void registerNetworkScoreCache(int,android.net.INetworkScoreCache,int)>
	<android.app.AppOpsManager: void startWatchingMode(int,java.lang.String,int,android.app.AppOpsManager$OnOpChangedListener)>
	<android.location.LocationManager: void requestSingleUpdate(java.lang.String,android.location.LocationListener,android.os.Looper)>
	<android.media.midi.MidiManager: void unregisterDeviceCallback(android.media.midi.MidiManager$DeviceCallback)>
	<android.location.LocationManager: void requestLocationUpdates(long,float,android.location.Criteria,android.app.PendingIntent)>
	<android.app.AppOpsManager: int startOpNoThrow(int,int,java.lang.String,boolean)>
	<android.hardware.display.DisplayManager: void startWifiDisplayScan()>
	<android.location.LocationManager: void removeUpdates(android.app.PendingIntent)>
	<android.hardware.input.InputManager: android.view.InputDevice getInputDeviceByDescriptor(java.lang.String)>
	<android.hardware.input.InputManager: int[] getInputDeviceIds()>
	<android.view.accessibility.AccessibilityManager: void performAccessibilityShortcut()>
	<android.hardware.display.DisplayManager: void registerDisplayListener(android.hardware.display.DisplayManager$DisplayListener,android.os.Handler)>
	<android.view.accessibility.AccessibilityManager: android.view.accessibility.AccessibilityManager getInstance(android.content.Context)>
	<android.view.autofill.AutofillManager: boolean isEnabled()>
