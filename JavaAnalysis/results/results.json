[{"callChain" : ["<com.android.server.GraphicsStatsService: android.os.ParcelFileDescriptor requestBufferForProcess(java.lang.String,android.view.IGraphicsStatsCallback)>", "<com.android.server.GraphicsStatsService: android.os.ParcelFileDescriptor requestBufferForProcessLocked(android.view.IGraphicsStatsCallback,int,int,java.lang.String,long)>", "<com.android.server.GraphicsStatsService: com.android.server.GraphicsStatsService$ActiveBuffer fetchActiveBuffersLocked(android.view.IGraphicsStatsCallback,int,int,java.lang.String,long)>", "<com.android.server.GraphicsStatsService$ActiveBuffer: void <init>(com.android.server.GraphicsStatsService,android.view.IGraphicsStatsCallback,int,int,java.lang.String,long)>"], "listTag" : "java.util.ArrayList", "mtd" : "<com.android.server.GraphicsStatsService: android.os.ParcelFileDescriptor requestBufferForProcess(java.lang.String,android.view.IGraphicsStatsCallback)>", "serviceName" : "\"graphicsstats\""}, {"callChain" : ["<com.android.server.pm.PackageManagerService: void addOnPermissionsChangeListener(android.content.pm.IOnPermissionsChangeListener)>", "<com.android.server.pm.PackageManagerService$OnPermissionChangeListeners: void addListenerLocked(android.content.pm.IOnPermissionsChangeListener)>"], "listTag" : "android.os.RemoteCallbackList", "mtd" : "<com.android.server.pm.PackageManagerService: void addOnPermissionsChangeListener(android.content.pm.IOnPermissionsChangeListener)>", "serviceName" : "\"package\""}, {"callChain" : ["<com.android.server.pm.PackageManagerService: void registerMoveCallback(android.content.pm.IPackageMoveObserver)>", "<com.android.server.pm.PackageManagerService$MoveCallbacks: void register(android.content.pm.IPackageMoveObserver)>"], "listTag" : "android.os.RemoteCallbackList", "mtd" : "<com.android.server.pm.PackageManagerService: void registerMoveCallback(android.content.pm.IPackageMoveObserver)>", "serviceName" : "\"package\""}, {"callChain" : ["<com.android.server.clipboard.ClipboardService$ClipboardImpl: void addPrimaryClipChangedListener(android.content.IOnPrimaryClipChangedListener,java.lang.String)>"], "listTag" : "android.os.RemoteCallbackList", "mtd" : "<com.android.server.clipboard.ClipboardService$ClipboardImpl: void addPrimaryClipChangedListener(android.content.IOnPrimaryClipChangedListener,java.lang.String)>", "serviceName" : "\"clipboard\""}, {"callChain" : ["<com.android.server.ethernet.EthernetServiceImpl: void addListener(android.net.IEthernetServiceListener)>", "<com.android.server.ethernet.EthernetTracker: void addListener(android.net.IEthernetServiceListener,boolean)>"], "listTag" : "android.os.RemoteCallbackList", "mtd" : "<com.android.server.ethernet.EthernetServiceImpl: void addListener(android.net.IEthernetServiceListener)>", "serviceName" : "\"ethernet\""}, {"callChain" : ["<com.android.server.CountryDetectorService: void addCountryListener(android.location.ICountryListener)>", "<com.android.server.CountryDetectorService: void addListener(android.location.ICountryListener)>"], "listTag" : "java.util.HashMap", "mtd" : "<com.android.server.CountryDetectorService: void addCountryListener(android.location.ICountryListener)>", "serviceName" : "\"country_detector\""}, {"callChain" : ["<com.android.server.audio.AudioService: int requestAudioFocus(android.media.AudioAttributes,int,android.os.IBinder,android.media.IAudioFocusDispatcher,java.lang.String,java.lang.String,int,android.media.audiopolicy.IAudioPolicyCallback,int)>", "<com.android.server.audio.MediaFocusControl: int requestAudioFocus(android.media.AudioAttributes,int,android.os.IBinder,android.media.IAudioFocusDispatcher,java.lang.String,java.lang.String,int,int,boolean)>", "<com.android.server.audio.MediaFocusControl: boolean notifyExtFocusPolicyFocusRequest_syncAf(android.media.AudioFocusInfo,android.media.IAudioFocusDispatcher,android.os.IBinder)>"], "listTag" : "java.util.HashMap", "mtd" : "<com.android.server.audio.AudioService: int requestAudioFocus(android.media.AudioAttributes,int,android.os.IBinder,android.media.IAudioFocusDispatcher,java.lang.String,java.lang.String,int,android.media.audiopolicy.IAudioPolicyCallback,int)>", "serviceName" : "\"audio\""}, {"callChain" : ["<com.android.server.audio.AudioService: java.lang.String registerAudioPolicy(android.media.audiopolicy.AudioPolicyConfig,android.media.audiopolicy.IAudioPolicyCallback,boolean,boolean,boolean)>"], "listTag" : "java.util.HashMap", "mtd" : "<com.android.server.audio.AudioService: java.lang.String registerAudioPolicy(android.media.audiopolicy.AudioPolicyConfig,android.media.audiopolicy.IAudioPolicyCallback,boolean,boolean,boolean)>", "serviceName" : "\"audio\""}, {"callChain" : ["<com.android.server.audio.AudioService: void startBluetoothSco(android.os.IBinder,int)>", "<com.android.server.audio.AudioService: void startBluetoothScoInt(android.os.IBinder,int)>", "<com.android.server.audio.AudioService$ScoClient: void incCount(int)>"], "listTag" : "java.util.ArrayList", "mtd" : "<com.android.server.audio.AudioService: void startBluetoothSco(android.os.IBinder,int)>", "serviceName" : "\"audio\""}, {"callChain" : ["<com.android.server.audio.AudioService: android.media.AudioRoutesInfo startWatchingRoutes(android.media.IAudioRoutesObserver)>"], "listTag" : "android.os.RemoteCallbackList", "mtd" : "<com.android.server.audio.AudioService: android.media.AudioRoutesInfo startWatchingRoutes(android.media.IAudioRoutesObserver)>", "serviceName" : "\"audio\""}, {"callChain" : ["<com.android.server.audio.AudioService: void registerPlaybackCallback(android.media.IPlaybackConfigDispatcher)>", "<com.android.server.audio.PlaybackActivityMonitor: void registerPlaybackCallback(android.media.IPlaybackConfigDispatcher,boolean)>", "<com.android.server.audio.PlaybackActivityMonitor$PlayMonitorClient: boolean init()>"], "listTag" : "java.util.ArrayList", "mtd" : "<com.android.server.audio.AudioService: void registerPlaybackCallback(android.media.IPlaybackConfigDispatcher)>", "serviceName" : "\"audio\""}, {"callChain" : ["<com.android.server.audio.AudioService: void registerAudioServerStateDispatcher(android.media.IAudioServerStateDispatcher)>"], "listTag" : "java.util.HashMap", "mtd" : "<com.android.server.audio.AudioService: void registerAudioServerStateDispatcher(android.media.IAudioServerStateDispatcher)>", "serviceName" : "\"audio\""}, {"callChain" : ["<com.android.server.audio.AudioService: void startBluetoothScoVirtualCall(android.os.IBinder)>", "<com.android.server.audio.AudioService: void startBluetoothScoInt(android.os.IBinder,int)>", "<com.android.server.audio.AudioService$ScoClient: void incCount(int)>"], "listTag" : "java.util.ArrayList", "mtd" : "<com.android.server.audio.AudioService: void startBluetoothScoVirtualCall(android.os.IBinder)>", "serviceName" : "\"audio\""}, {"callChain" : ["<com.android.server.audio.AudioService: void forceRemoteSubmixFullVolume(boolean,android.os.IBinder)>", "<com.android.server.audio.AudioService$RmtSbmxFullVolDeathHandler: void <init>(com.android.server.audio.AudioService,android.os.IBinder)>"], "listTag" : "java.util.ArrayList", "mtd" : "<com.android.server.audio.AudioService: void forceRemoteSubmixFullVolume(boolean,android.os.IBinder)>", "serviceName" : "\"audio\""}, {"callChain" : ["<com.android.server.audio.AudioService: void registerRecordingCallback(android.media.IRecordingConfigDispatcher)>", "<com.android.server.audio.RecordingActivityMonitor: void registerRecordingCallback(android.media.IRecordingConfigDispatcher,boolean)>", "<com.android.server.audio.RecordingActivityMonitor$RecMonitorClient: boolean init()>"], "listTag" : "java.util.ArrayList", "mtd" : "<com.android.server.audio.AudioService: void registerRecordingCallback(android.media.IRecordingConfigDispatcher)>", "serviceName" : "\"audio\""}, {"callChain" : ["<com.android.server.input.InputManagerService: void registerInputDevicesChangedListener(android.hardware.input.IInputDevicesChangedListener)>"], "listTag" : "android.util.SparseArray", "mtd" : "<com.android.server.input.InputManagerService: void registerInputDevicesChangedListener(android.hardware.input.IInputDevicesChangedListener)>", "serviceName" : "\"input\""}, {"callChain" : ["<com.android.server.input.InputManagerService: void registerTabletModeChangedListener(android.hardware.input.ITabletModeChangedListener)>"], "listTag" : "android.util.SparseArray", "mtd" : "<com.android.server.input.InputManagerService: void registerTabletModeChangedListener(android.hardware.input.ITabletModeChangedListener)>", "serviceName" : "\"input\""}, {"callChain" : ["<com.android.server.input.InputManagerService: void vibrate(int,long[],int,android.os.IBinder)>"], "listTag" : "java.util.HashMap", "mtd" : "<com.android.server.input.InputManagerService: void vibrate(int,long[],int,android.os.IBinder)>", "serviceName" : "\"input\""}, {"callChain" : ["<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: void addOnAppsChangedListener(java.lang.String,android.content.pm.IOnAppsChangedListener)>"], "listTag" : "android.os.RemoteCallbackList", "mtd" : "<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: void addOnAppsChangedListener(java.lang.String,android.content.pm.IOnAppsChangedListener)>", "serviceName" : "\"launcherapps\""}, {"callChain" : ["<com.android.server.content.ContentService: void registerContentObserver(android.net.Uri,boolean,android.database.IContentObserver,int,int)>", "<com.android.server.content.ContentService$ObserverNode: void addObserverLocked(android.net.Uri,android.database.IContentObserver,boolean,java.lang.Object,int,int,int)>", "<com.android.server.content.ContentService$ObserverNode: void addObserverLocked(android.net.Uri,int,android.database.IContentObserver,boolean,java.lang.Object,int,int,int)>", "<com.android.server.content.ContentService$ObserverNode$ObserverEntry: void <init>(com.android.server.content.ContentService$ObserverNode,android.database.IContentObserver,boolean,java.lang.Object,int,int,int)>"], "listTag" : "java.util.ArrayList", "mtd" : "<com.android.server.content.ContentService: void registerContentObserver(android.net.Uri,boolean,android.database.IContentObserver,int,int)>", "serviceName" : "\"content\""}, {"callChain" : ["<com.android.server.content.ContentService: void addStatusChangeListener(int,android.content.ISyncStatusObserver)>", "<com.android.server.content.SyncStorageEngine: void addStatusChangeListener(int,android.content.ISyncStatusObserver)>"], "listTag" : "android.os.RemoteCallbackList", "mtd" : "<com.android.server.content.ContentService: void addStatusChangeListener(int,android.content.ISyncStatusObserver)>", "serviceName" : "\"content\""}, {"callChain" : ["<com.android.server.location.ContextHubService: int registerCallback(android.hardware.location.IContextHubCallback)>"], "listTag" : "android.os.RemoteCallbackList", "mtd" : "<com.android.server.location.ContextHubService: int registerCallback(android.hardware.location.IContextHubCallback)>", "serviceName" : "\"contexthub\""}, {"callChain" : ["<com.android.server.net.NetworkPolicyManagerService: void registerListener(android.net.INetworkPolicyListener)>"], "listTag" : "android.os.RemoteCallbackList", "mtd" : "<com.android.server.net.NetworkPolicyManagerService: void registerListener(android.net.INetworkPolicyListener)>", "serviceName" : "\"netpolicy\""}, {"callChain" : ["<com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub: int addClient(android.view.autofill.IAutoFillManagerClient,int)>", "<com.android.server.autofill.AutofillManagerServiceImpl: boolean addClientLocked(android.view.autofill.IAutoFillManagerClient)>"], "listTag" : "android.os.RemoteCallbackList", "mtd" : "<com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub: int addClient(android.view.autofill.IAutoFillManagerClient,int)>", "serviceName" : "\"autofill\""}, {"callChain" : ["<com.android.server.display.DisplayManagerService$BinderService: void registerCallback(android.hardware.display.IDisplayManagerCallback)>", "<com.android.server.display.DisplayManagerService: void access$2300(com.android.server.display.DisplayManagerService,android.hardware.display.IDisplayManagerCallback,int)>", "<com.android.server.display.DisplayManagerService: void registerCallbackInternal(android.hardware.display.IDisplayManagerCallback,int)>"], "listTag" : "android.util.SparseArray", "mtd" : "<com.android.server.display.DisplayManagerService$BinderService: void registerCallback(android.hardware.display.IDisplayManagerCallback)>", "serviceName" : "\"display\""}, {"callChain" : ["<com.android.server.display.DisplayManagerService$BinderService: int createVirtualDisplay(android.hardware.display.IVirtualDisplayCallback,android.media.projection.IMediaProjection,java.lang.String,java.lang.String,int,int,int,android.view.Surface,int,java.lang.String)>", "<com.android.server.display.DisplayManagerService: int access$3700(com.android.server.display.DisplayManagerService,android.hardware.display.IVirtualDisplayCallback,android.media.projection.IMediaProjection,int,java.lang.String,java.lang.String,int,int,int,android.view.Surface,int,java.lang.String)>", "<com.android.server.display.DisplayManagerService: int createVirtualDisplayInternal(android.hardware.display.IVirtualDisplayCallback,android.media.projection.IMediaProjection,int,java.lang.String,java.lang.String,int,int,int,android.view.Surface,int,java.lang.String)>", "<com.android.server.display.VirtualDisplayAdapter: com.android.server.display.DisplayDevice createVirtualDisplayLocked(android.hardware.display.IVirtualDisplayCallback,android.media.projection.IMediaProjection,int,java.lang.String,java.lang.String,int,int,int,android.view.Surface,int,java.lang.String)>"], "listTag" : "android.util.ArrayMap", "mtd" : "<com.android.server.display.DisplayManagerService$BinderService: int createVirtualDisplay(android.hardware.display.IVirtualDisplayCallback,android.media.projection.IMediaProjection,java.lang.String,java.lang.String,int,int,int,android.view.Surface,int,java.lang.String)>", "serviceName" : "\"display\""}, {"callChain" : ["<com.android.server.print.PrintManagerService$PrintManagerImpl: void createPrinterDiscoverySession(android.print.IPrinterDiscoveryObserver,int)>", "<com.android.server.print.UserState: void createPrinterDiscoverySession(android.print.IPrinterDiscoveryObserver)>", "<com.android.server.print.UserState$PrinterDiscoverySessionMediator: void addObserverLocked(android.print.IPrinterDiscoveryObserver)>"], "listTag" : "android.os.RemoteCallbackList", "mtd" : "<com.android.server.print.PrintManagerService$PrintManagerImpl: void createPrinterDiscoverySession(android.print.IPrinterDiscoveryObserver,int)>", "serviceName" : "\"print\""}, {"callChain" : ["<com.android.server.LocationManagerService: boolean addGnssMeasurementsListener(android.location.IGnssMeasurementsListener,java.lang.String)>"], "listTag" : "android.util.ArrayMap", "mtd" : "<com.android.server.LocationManagerService: boolean addGnssMeasurementsListener(android.location.IGnssMeasurementsListener,java.lang.String)>", "serviceName" : "\"location\""}, {"callChain" : ["<com.android.server.LocationManagerService: void requestLocationUpdates(android.location.LocationRequest,android.location.ILocationListener,android.app.PendingIntent,java.lang.String)>", "<com.android.server.LocationManagerService: com.android.server.LocationManagerService$Receiver checkListenerOrIntentLocked(android.location.ILocationListener,android.app.PendingIntent,int,int,java.lang.String,android.os.WorkSource,boolean)>", "<com.android.server.LocationManagerService: com.android.server.LocationManagerService$Receiver getReceiverLocked(android.location.ILocationListener,int,int,java.lang.String,android.os.WorkSource,boolean)>"], "listTag" : "java.util.HashMap", "mtd" : "<com.android.server.LocationManagerService: void requestLocationUpdates(android.location.LocationRequest,android.location.ILocationListener,android.app.PendingIntent,java.lang.String)>", "serviceName" : "\"location\""}, {"callChain" : ["<com.android.server.LocationManagerService: void clearTestProviderEnabled(java.lang.String,java.lang.String)>", "<com.android.server.LocationManagerService: void updateProvidersLocked()>", "<com.android.server.LocationManagerService: void updateProviderListenersLocked(java.lang.String,boolean)>", "<com.android.server.LocationManagerService: void removeUpdatesLocked(com.android.server.LocationManagerService$Receiver)>"], "listTag" : "java.util.ArrayList", "mtd" : "<com.android.server.LocationManagerService: void clearTestProviderEnabled(java.lang.String,java.lang.String)>", "serviceName" : "\"location\""}, {"callChain" : ["<com.android.server.LocationManagerService: void addTestProvider(java.lang.String,com.android.internal.location.ProviderProperties,java.lang.String)>", "<com.android.server.LocationManagerService: void updateProvidersLocked()>", "<com.android.server.LocationManagerService: void updateProviderListenersLocked(java.lang.String,boolean)>", "<com.android.server.LocationManagerService: void removeUpdatesLocked(com.android.server.LocationManagerService$Receiver)>"], "listTag" : "java.util.ArrayList", "mtd" : "<com.android.server.LocationManagerService: void addTestProvider(java.lang.String,com.android.internal.location.ProviderProperties,java.lang.String)>", "serviceName" : "\"location\""}, {"callChain" : ["<com.android.server.LocationManagerService: boolean addGnssNavigationMessageListener(android.location.IGnssNavigationMessageListener,java.lang.String)>"], "listTag" : "android.util.ArrayMap", "mtd" : "<com.android.server.LocationManagerService: boolean addGnssNavigationMessageListener(android.location.IGnssNavigationMessageListener,java.lang.String)>", "serviceName" : "\"location\""}, {"callChain" : ["<com.android.server.LocationManagerService: void removeUpdates(android.location.ILocationListener,android.app.PendingIntent,java.lang.String)>", "<com.android.server.LocationManagerService: com.android.server.LocationManagerService$Receiver checkListenerOrIntentLocked(android.location.ILocationListener,android.app.PendingIntent,int,int,java.lang.String,android.os.WorkSource,boolean)>", "<com.android.server.LocationManagerService: com.android.server.LocationManagerService$Receiver getReceiverLocked(android.location.ILocationListener,int,int,java.lang.String,android.os.WorkSource,boolean)>"], "listTag" : "java.util.HashMap", "mtd" : "<com.android.server.LocationManagerService: void removeUpdates(android.location.ILocationListener,android.app.PendingIntent,java.lang.String)>", "serviceName" : "\"location\""}, {"callChain" : ["<com.android.server.media.MediaRouterService: void registerClientAsUser(android.media.IMediaRouterClient,java.lang.String,int)>", "<com.android.server.media.MediaRouterService: void registerClientLocked(android.media.IMediaRouterClient,int,int,java.lang.String,int,boolean)>"], "listTag" : "android.util.ArrayMap", "mtd" : "<com.android.server.media.MediaRouterService: void registerClientAsUser(android.media.IMediaRouterClient,java.lang.String,int)>", "serviceName" : "\"media_router\""}, {"callChain" : ["<com.android.server.wifi.WifiServiceImpl: int startLocalOnlyHotspot(android.os.Messenger,android.os.IBinder,java.lang.String)>", "<com.android.server.wifi.LocalOnlyHotspotRequestInfo: void <init>(android.os.IBinder,android.os.Messenger,com.android.server.wifi.LocalOnlyHotspotRequestInfo$RequestingApplicationDeathCallback)>"], "listTag" : "java.util.HashMap", "mtd" : "<com.android.server.wifi.WifiServiceImpl: int startLocalOnlyHotspot(android.os.Messenger,android.os.IBinder,java.lang.String)>", "serviceName" : "\"wifi\""}, {"callChain" : ["<com.android.server.StorageManagerService: void registerListener(android.os.storage.IStorageEventListener)>", "<com.android.server.StorageManagerService$Callbacks: void register(android.os.storage.IStorageEventListener)>"], "listTag" : "android.os.RemoteCallbackList", "mtd" : "<com.android.server.StorageManagerService: void registerListener(android.os.storage.IStorageEventListener)>", "serviceName" : "\"mount\""}, {"callChain" : ["<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: void showSession(android.service.voice.IVoiceInteractionService,android.os.Bundle,int)>", "<com.android.server.voiceinteraction.VoiceInteractionManagerServiceImpl: boolean showSessionLocked(android.os.Bundle,int,com.android.internal.app.IVoiceInteractionSessionShowCallback,android.os.IBinder)>", "<com.android.server.voiceinteraction.VoiceInteractionSessionConnection: boolean showLocked(android.os.Bundle,int,int,com.android.internal.app.IVoiceInteractionSessionShowCallback,java.util.List)>"], "listTag" : "java.util.ArrayList", "mtd" : "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: void showSession(android.service.voice.IVoiceInteractionService,android.os.Bundle,int)>", "serviceName" : "\"voiceinteraction\""}, {"callChain" : ["<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: void registerVoiceInteractionSessionListener(com.android.internal.app.IVoiceInteractionSessionListener)>"], "listTag" : "android.os.RemoteCallbackList", "mtd" : "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: void registerVoiceInteractionSessionListener(com.android.internal.app.IVoiceInteractionSessionListener)>", "serviceName" : "\"voiceinteraction\""}, {"callChain" : ["<com.android.server.TextServicesManagerService: void getSpellCheckerService(java.lang.String,java.lang.String,com.android.internal.textservice.ITextServicesSessionListener,com.android.internal.textservice.ISpellCheckerSessionListener,android.os.Bundle)>", "<com.android.server.TextServicesManagerService$SpellCheckerBindGroup: void getISpellCheckerSessionOrQueueLocked(com.android.server.TextServicesManagerService$SessionRequest)>"], "listTag" : "android.os.RemoteCallbackList", "mtd" : "<com.android.server.TextServicesManagerService: void getSpellCheckerService(java.lang.String,java.lang.String,com.android.internal.textservice.ITextServicesSessionListener,com.android.internal.textservice.ISpellCheckerSessionListener,android.os.Bundle)>", "serviceName" : "\"textservices\""}, {"callChain" : ["<com.android.server.midi.MidiService: void unregisterListener(android.os.IBinder,android.media.midi.IMidiDeviceListener)>", "<com.android.server.midi.MidiService: com.android.server.midi.MidiService$Client getClient(android.os.IBinder)>"], "listTag" : "java.util.HashMap", "mtd" : "<com.android.server.midi.MidiService: void unregisterListener(android.os.IBinder,android.media.midi.IMidiDeviceListener)>", "serviceName" : "\"midi\""}, {"callChain" : ["<com.android.server.midi.MidiService: android.media.midi.MidiDeviceInfo registerDeviceServer(android.media.midi.IMidiDeviceServer,int,int,java.lang.String[],java.lang.String[],android.os.Bundle,int)>", "<com.android.server.midi.MidiService: android.media.midi.MidiDeviceInfo addDeviceLocked(int,int,int,java.lang.String[],java.lang.String[],android.os.Bundle,android.media.midi.IMidiDeviceServer,android.content.pm.ServiceInfo,boolean,int)>", "<com.android.server.midi.MidiService$Device: void <init>(com.android.server.midi.MidiService,android.media.midi.IMidiDeviceServer,android.media.midi.MidiDeviceInfo,android.content.pm.ServiceInfo,int)>", "<com.android.server.midi.MidiService$Device: void setDeviceServer(android.media.midi.IMidiDeviceServer)>"], "listTag" : "java.util.HashMap", "mtd" : "<com.android.server.midi.MidiService: android.media.midi.MidiDeviceInfo registerDeviceServer(android.media.midi.IMidiDeviceServer,int,int,java.lang.String[],java.lang.String[],android.os.Bundle,int)>", "serviceName" : "\"midi\""}, {"callChain" : ["<com.android.server.midi.MidiService: void closeDevice(android.os.IBinder,android.os.IBinder)>", "<com.android.server.midi.MidiService: com.android.server.midi.MidiService$Client getClient(android.os.IBinder)>"], "listTag" : "java.util.HashMap", "mtd" : "<com.android.server.midi.MidiService: void closeDevice(android.os.IBinder,android.os.IBinder)>", "serviceName" : "\"midi\""}, {"callChain" : ["<com.android.server.midi.MidiService: void unregisterDeviceServer(android.media.midi.IMidiDeviceServer)>", "<com.android.server.midi.MidiService$Device: void closeLocked()>", "<com.android.server.midi.MidiService$Device: void setDeviceServer(android.media.midi.IMidiDeviceServer)>"], "listTag" : "java.util.HashMap", "mtd" : "<com.android.server.midi.MidiService: void unregisterDeviceServer(android.media.midi.IMidiDeviceServer)>", "serviceName" : "\"midi\""}, {"callChain" : ["<com.android.server.midi.MidiService: void openBluetoothDevice(android.os.IBinder,android.bluetooth.BluetoothDevice,android.media.midi.IMidiDeviceOpenCallback)>", "<com.android.server.midi.MidiService: com.android.server.midi.MidiService$Client getClient(android.os.IBinder)>"], "listTag" : "java.util.HashMap", "mtd" : "<com.android.server.midi.MidiService: void openBluetoothDevice(android.os.IBinder,android.bluetooth.BluetoothDevice,android.media.midi.IMidiDeviceOpenCallback)>", "serviceName" : "\"midi\""}, {"callChain" : ["<com.android.server.midi.MidiService: void openDevice(android.os.IBinder,android.media.midi.MidiDeviceInfo,android.media.midi.IMidiDeviceOpenCallback)>", "<com.android.server.midi.MidiService: com.android.server.midi.MidiService$Client getClient(android.os.IBinder)>"], "listTag" : "java.util.HashMap", "mtd" : "<com.android.server.midi.MidiService: void openDevice(android.os.IBinder,android.media.midi.MidiDeviceInfo,android.media.midi.IMidiDeviceOpenCallback)>", "serviceName" : "\"midi\""}, {"callChain" : ["<com.android.server.midi.MidiService: void registerListener(android.os.IBinder,android.media.midi.IMidiDeviceListener)>", "<com.android.server.midi.MidiService: com.android.server.midi.MidiService$Client getClient(android.os.IBinder)>"], "listTag" : "java.util.HashMap", "mtd" : "<com.android.server.midi.MidiService: void registerListener(android.os.IBinder,android.media.midi.IMidiDeviceListener)>", "serviceName" : "\"midi\""}, {"callChain" : ["<com.android.server.NetworkManagementService: void registerObserver(android.net.INetworkManagementEventObserver)>"], "listTag" : "android.os.RemoteCallbackList", "mtd" : "<com.android.server.NetworkManagementService: void registerObserver(android.net.INetworkManagementEventObserver)>", "serviceName" : "\"network_management\""}, {"callChain" : ["<com.android.server.NetworkManagementService: void registerNetworkActivityListener(android.os.INetworkActivityListener)>"], "listTag" : "android.os.RemoteCallbackList", "mtd" : "<com.android.server.NetworkManagementService: void registerNetworkActivityListener(android.os.INetworkActivityListener)>", "serviceName" : "\"network_management\""}, {"callChain" : ["<com.android.server.DeviceIdleController$BinderService: boolean registerMaintenanceActivityListener(android.os.IMaintenanceActivityListener)>", "<com.android.server.DeviceIdleController: boolean registerMaintenanceActivityListener(android.os.IMaintenanceActivityListener)>"], "listTag" : "android.os.RemoteCallbackList", "mtd" : "<com.android.server.DeviceIdleController$BinderService: boolean registerMaintenanceActivityListener(android.os.IMaintenanceActivityListener)>", "serviceName" : "\"deviceidle\""}, {"callChain" : ["<com.android.server.TelephonyRegistry: void listenForSubscriber(int,java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>", "<com.android.server.TelephonyRegistry: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean,int)>", "<com.android.server.TelephonyRegistry: com.android.server.TelephonyRegistry$Record add(android.os.IBinder)>"], "listTag" : "java.util.ArrayList", "mtd" : "<com.android.server.TelephonyRegistry: void listenForSubscriber(int,java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>", "serviceName" : "\"telephony.registry\""}, {"callChain" : ["<com.android.server.TelephonyRegistry: void addOnSubscriptionsChangedListener(java.lang.String,com.android.internal.telephony.IOnSubscriptionsChangedListener)>", "<com.android.server.TelephonyRegistry: com.android.server.TelephonyRegistry$Record add(android.os.IBinder)>"], "listTag" : "java.util.ArrayList", "mtd" : "<com.android.server.TelephonyRegistry: void addOnSubscriptionsChangedListener(java.lang.String,com.android.internal.telephony.IOnSubscriptionsChangedListener)>", "serviceName" : "\"telephony.registry\""}, {"callChain" : ["<com.android.server.TelephonyRegistry: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>", "<com.android.server.TelephonyRegistry: void listenForSubscriber(int,java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>", "<com.android.server.TelephonyRegistry: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean,int)>", "<com.android.server.TelephonyRegistry: com.android.server.TelephonyRegistry$Record add(android.os.IBinder)>"], "listTag" : "java.util.ArrayList", "mtd" : "<com.android.server.TelephonyRegistry: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>", "serviceName" : "\"telephony.registry\""}, {"callChain" : ["<com.android.server.AppOpsService: void startWatchingModeWithFlags(int,java.lang.String,int,com.android.internal.app.IAppOpsCallback)>"], "listTag" : "android.util.ArrayMap", "mtd" : "<com.android.server.AppOpsService: void startWatchingModeWithFlags(int,java.lang.String,int,com.android.internal.app.IAppOpsCallback)>", "serviceName" : "\"appops\""}, {"callChain" : ["<com.android.server.AppOpsService: android.os.IBinder getToken(android.os.IBinder)>", "<com.android.server.AppOpsService$ClientState: void <init>(com.android.server.AppOpsService,android.os.IBinder)>"], "listTag" : "android.util.ArrayMap", "mtd" : "<com.android.server.AppOpsService: android.os.IBinder getToken(android.os.IBinder)>", "serviceName" : "\"appops\""}, {"callChain" : ["<com.android.server.AppOpsService: void startWatchingActive(int[],com.android.internal.app.IAppOpsActiveCallback)>"], "listTag" : "android.util.ArrayMap", "mtd" : "<com.android.server.AppOpsService: void startWatchingActive(int[],com.android.internal.app.IAppOpsActiveCallback)>", "serviceName" : "\"appops\""}, {"callChain" : ["<com.android.server.AppOpsService: void startWatchingMode(int,java.lang.String,com.android.internal.app.IAppOpsCallback)>", "<com.android.server.AppOpsService: void startWatchingModeWithFlags(int,java.lang.String,int,com.android.internal.app.IAppOpsCallback)>"], "listTag" : "android.util.ArrayMap", "mtd" : "<com.android.server.AppOpsService: void startWatchingMode(int,java.lang.String,com.android.internal.app.IAppOpsCallback)>", "serviceName" : "\"appops\""}, {"callChain" : ["<com.android.server.NetworkScoreService: void registerNetworkScoreCache(int,android.net.INetworkScoreCache,int)>"], "listTag" : "android.os.RemoteCallbackList", "mtd" : "<com.android.server.NetworkScoreService: void registerNetworkScoreCache(int,android.net.INetworkScoreCache,int)>", "serviceName" : "\"network_score\""}, {"callChain" : ["<com.android.server.accessibility.AccessibilityManagerService: long addClient(android.view.accessibility.IAccessibilityManagerClient,int)>"], "listTag" : "android.os.RemoteCallbackList", "mtd" : "<com.android.server.accessibility.AccessibilityManagerService: long addClient(android.view.accessibility.IAccessibilityManagerClient,int)>", "serviceName" : "\"accessibility\""}, {"callChain" : ["<com.android.server.accessibility.AccessibilityManagerService: int addAccessibilityInteractionConnection(android.view.IWindow,android.view.accessibility.IAccessibilityInteractionConnection,java.lang.String,int)>"], "listTag" : "android.util.SparseArray", "mtd" : "<com.android.server.accessibility.AccessibilityManagerService: int addAccessibilityInteractionConnection(android.view.IWindow,android.view.accessibility.IAccessibilityInteractionConnection,java.lang.String,int)>", "serviceName" : "\"accessibility\""}, {"callChain" : ["<com.android.server.wm.WindowManagerService: boolean registerWallpaperVisibilityListener(android.view.IWallpaperVisibilityListener,int)>", "<com.android.server.wm.WallpaperVisibilityListeners: void registerWallpaperVisibilityListener(android.view.IWallpaperVisibilityListener,int)>"], "listTag" : "android.os.RemoteCallbackList", "mtd" : "<com.android.server.wm.WindowManagerService: boolean registerWallpaperVisibilityListener(android.view.IWallpaperVisibilityListener,int)>", "serviceName" : "\"window\""}, {"callChain" : ["<com.android.server.wm.WindowManagerService: void registerDockedStackListener(android.view.IDockedStackListener)>", "<com.android.server.wm.DockedStackDividerController: void registerDockedStackListener(android.view.IDockedStackListener)>"], "listTag" : "android.os.RemoteCallbackList", "mtd" : "<com.android.server.wm.WindowManagerService: void registerDockedStackListener(android.view.IDockedStackListener)>", "serviceName" : "\"window\""}, {"callChain" : ["<com.android.server.am.ActivityManagerService: void registerIntentSenderCancelListener(android.content.IIntentSender,com.android.internal.os.IResultReceiver)>", "<com.android.server.am.PendingIntentRecord: void registerCancelListenerLocked(com.android.internal.os.IResultReceiver)>"], "listTag" : "android.os.RemoteCallbackList", "mtd" : "<com.android.server.am.ActivityManagerService: void registerIntentSenderCancelListener(android.content.IIntentSender,com.android.internal.os.IResultReceiver)>", "serviceName" : "\"activity\""}, {"callChain" : ["<com.android.server.am.ActivityManagerService: void registerUserSwitchObserver(android.app.IUserSwitchObserver,java.lang.String)>", "<com.android.server.am.UserController: void registerUserSwitchObserver(android.app.IUserSwitchObserver,java.lang.String)>"], "listTag" : "android.os.RemoteCallbackList", "mtd" : "<com.android.server.am.ActivityManagerService: void registerUserSwitchObserver(android.app.IUserSwitchObserver,java.lang.String)>", "serviceName" : "\"activity\""}, {"callChain" : ["<com.android.server.am.ActivityManagerService: boolean unlockUser(int,byte[],byte[],android.os.IProgressListener)>", "<com.android.server.am.UserController: boolean unlockUser(int,byte[],byte[],android.os.IProgressListener)>", "<com.android.server.am.UserController: boolean unlockUserCleared(int,byte[],byte[],android.os.IProgressListener)>", "<com.android.internal.util.ProgressReporter: void addListener(android.os.IProgressListener)>"], "listTag" : "android.os.RemoteCallbackList", "mtd" : "<com.android.server.am.ActivityManagerService: boolean unlockUser(int,byte[],byte[],android.os.IProgressListener)>", "serviceName" : "\"activity\""}, {"callChain" : ["<com.android.server.am.ActivityManagerService: android.content.Intent registerReceiver(android.app.IApplicationThread,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int,int)>"], "listTag" : "java.util.HashMap", "mtd" : "<com.android.server.am.ActivityManagerService: android.content.Intent registerReceiver(android.app.IApplicationThread,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int,int)>", "serviceName" : "\"activity\""}, {"callChain" : ["<com.android.server.am.ActivityManagerService: boolean startUserInBackgroundWithListener(int,android.os.IProgressListener)>", "<com.android.server.am.UserController: boolean startUser(int,boolean,android.os.IProgressListener)>", "<com.android.internal.util.ProgressReporter: void addListener(android.os.IProgressListener)>"], "listTag" : "android.os.RemoteCallbackList", "mtd" : "<com.android.server.am.ActivityManagerService: boolean startUserInBackgroundWithListener(int,android.os.IProgressListener)>", "serviceName" : "\"activity\""}, {"callChain" : ["<com.android.server.am.ActivityManagerService: boolean startUserInBackground(int)>", "<com.android.server.am.ActivityManagerService: boolean startUserInBackgroundWithListener(int,android.os.IProgressListener)>", "<com.android.server.am.UserController: boolean startUser(int,boolean,android.os.IProgressListener)>", "<com.android.internal.util.ProgressReporter: void addListener(android.os.IProgressListener)>"], "listTag" : "android.os.RemoteCallbackList", "mtd" : "<com.android.server.am.ActivityManagerService: boolean startUserInBackground(int)>", "serviceName" : "\"activity\""}, {"callChain" : ["<com.android.server.am.ActivityManagerService: void registerUidObserver(android.app.IUidObserver,int,int,java.lang.String)>"], "listTag" : "android.os.RemoteCallbackList", "mtd" : "<com.android.server.am.ActivityManagerService: void registerUidObserver(android.app.IUidObserver,int,int,java.lang.String)>", "serviceName" : "\"activity\""}, {"callChain" : ["<com.android.server.am.ActivityManagerService: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>", "<com.android.server.am.ActiveServices: int bindServiceLocked(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>"], "listTag" : "android.util.ArrayMap", "mtd" : "<com.android.server.am.ActivityManagerService: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>", "serviceName" : "\"activity\""}, {"callChain" : ["<com.android.server.am.ActivityManagerService: void registerProcessObserver(android.app.IProcessObserver)>"], "listTag" : "android.os.RemoteCallbackList", "mtd" : "<com.android.server.am.ActivityManagerService: void registerProcessObserver(android.app.IProcessObserver)>", "serviceName" : "\"activity\""}, {"callChain" : ["<com.android.server.InputMethodManagerService: void addClient(com.android.internal.view.IInputMethodClient,com.android.internal.view.IInputContext,int,int)>"], "listTag" : "java.util.HashMap", "mtd" : "<com.android.server.InputMethodManagerService: void addClient(com.android.internal.view.IInputMethodClient,com.android.internal.view.IInputContext,int,int)>", "serviceName" : "\"input_method\""}, {"callChain" : ["<com.android.server.media.MediaSessionService$SessionManagerImpl: void addSessionsListener(android.media.session.IActiveSessionsListener,android.content.ComponentName,int)>"], "listTag" : "java.util.ArrayList", "mtd" : "<com.android.server.media.MediaSessionService$SessionManagerImpl: void addSessionsListener(android.media.session.IActiveSessionsListener,android.content.ComponentName,int)>", "serviceName" : "\"media_session\""}]